@startuml
'https://plantuml.com/class-diagram

skinparam linetype ortho

skinparam nodesep 25
skinparam ranksep 25

skinparam BackgroundColor #00000000

abstract class AResource {
    - deletorGroup: uint32_t
    # engine: s_ptr<Engine>

    + AResource(engine: const s_ptr<Engine>&)
    # pushDeletor(deletor: function<void(const s_ptr<Engine>& engine)>): void
    + destroy() const: void
    + resetDestroy(): void
}

abstract class ARenderer {
    # _windowRenderPass: u_ptr<RenderPass>
    # _windowFramebuffers: ResourceRing<Framebuffer>

    + ARenderer(engine: const s_ptr<Engine>&)
    + virtual update(delta: float): void
    + virtual recordCommands(commandBuffer: const vk::CommandBuffer&, swapchainImage: uint32_t, flightFrame: uint32_t): void
    # initWindowRenderPass(): void
    # initWindowFramebuffers(): void
}

class VoxelRenderer {
    - _camera: u_ptr<CameraController>
    - _settings: s_ptr<VoxelRenderSettings>
    - _scene: s_ptr<VoxelScene>
    - _noiseTexture: s_ptr<Texture2D>
    - _geometryStage: u_ptr<GeometryStage>
    - _denoiserStage: u_ptr<DenoiserStage>
    - _upscalerStage: u_ptr<UpscalerStage>
    - _blitStage: u_ptr<BlitStage>
    - _imguiRenderer: u_ptr<ImguiRenderer>
    - _time: float

    + VoxelRenderer(engine: const s_ptr<Engine>&)
    + virtual update(delta: float) override: void
    + virtual recordCommands(commandBuffer: const vk::CommandBuffer&, swapchainImage: uint32_t, flightFrame: uint32_t) override: void
}

class VoxelScene {
    + width: uint32_t
    + height: uint32_t
    + depth: uint32_t
    + sceneTexture: optional<Texture3D>
    + paletteBuffer: optional<Buffer>

    + VoxelScene(engine: const s_ptr<Engine>&, filename: const string& )
}

abstract class AVoxelRenderStage {
    # _settings: s_ptr<VoxelRenderSettings>

    # AVoxelRenderStage(engine: const s_ptr<Engine>&, settings: const s_ptr<VoxelRenderSettings>&)
}

class BlitStage {
    - _offsets: BlitOffsets
    - _offsetsBuffer: u_ptr<Buffer>
    - _pipeline: u_ptr<BlitPipeline>

    + BlitStage(engine: const s_ptr<Engine>&, settings: const s_ptr<VoxelRenderSettings>&, renderPass: const RenderPass&)
    + record(cmd: const vk::CommandBuffer&, flightFrame: uint32_t, ...): void
}

class DenoiserStage {
    - _kernelBuffer: u_ptr<Buffer>
    - _offsetBuffer: u_ptr<Buffer>
    - _iterationParamsBuffers: vector<Buffer>
    - _iterationDescriptors: vector<DescriptorSet>
    - _colorTargets: ResourceRing<RenderImage>
    - _renderPasses: ResourceRing<RenderPass>
    - _framebuffers: ResourceRing<Framebuffer>
    - _pipeline: u_ptr<DenoiserPipeline>

    + DenoiserStage(engine: const s_ptr<Engine>&, settings: const s_ptr<VoxelRenderSettings>&)
    + updateParameters() const: void
    + record(cmd: const vk::CommandBuffer&, flightFrame: uint32_t, ...) const: const RenderImage&
}

class GeometryStage {
    - _parameters: VolumeParameters
    - _parametersBuffer: u_ptr<Buffer>
    - _colorTarget: u_ptr<RenderImage>
    - _depthTarget: u_ptr<RenderImage>
    - _motionTarget: u_ptr<RenderImage>
    - _maskTarget: u_ptr<RenderImage>
    - _normalTarget: u_ptr<RenderImage>
    - _positionTargets: ResourceRing<RenderImage>
    - _renderPass: u_ptr<RenderPass>
    - _framebuffers: ResourceRing<Framebuffer>
    - _pipeline: u_ptr<VoxelSDFPipeline>

    + GeometryStage(engine: const s_ptr<Engine>&, settings: const s_ptr<VoxelRenderSettings>&, ...)
    + record(cmd: const vk::CommandBuffer&, flightFrame: uint32_t): GeometryBuffer
    + getPipelineLayout() const: const vk::PipelineLayout&
}

class UpscalerStage {
    + jitterX: float
    + jitterY: float
    + frameCount: int
    - _target: u_ptr<RenderImage>
    - _fsrInterface: FfxFsr2Interface*
    - _fsrContext: FfxFsr2Context*
    - _fsrScratchBuffer: void*
    - _deltaMsec: float

    + UpscalerStage(engine: const s_ptr<Engine>&, settings: const s_ptr<VoxelRenderSettings>&)
    + update(delta: float): void
    + record(cmd: const vk::CommandBuffer&, ...): const RenderImage&
    - wrapRenderImage(image: const RenderImage&): FfxResource
}

ARenderer ..|> AResource

VoxelScene ..|> AResource

AVoxelRenderStage ..|> AResource

BlitStage ..|> AVoxelRenderStage
DenoiserStage ..|> AVoxelRenderStage
GeometryStage ..|> AVoxelRenderStage
UpscalerStage ..|> AVoxelRenderStage

GeometryStage .l.> VoxelScene

VoxelRenderer ..|> ARenderer
VoxelRenderer *-u- BlitStage
VoxelRenderer *-u- DenoiserStage
VoxelRenderer *-- GeometryStage
VoxelRenderer *-u- UpscalerStage
VoxelRenderer *-- VoxelScene

@enduml