@startuml
'https://plantuml.com/class-diagram

skinparam linetype ortho

skinparam nodesep 15
skinparam ranksep 25

skinparam BackgroundColor #00000000

class Engine {
    + window: GLFWwindow*
    + windowSize: glm::uvec2
    + inputs: InputCallbacks
    + instance: vk::Instance
    + physicalDevice: vk::PhysicalDevice
    + device: vk::Device
    + allocator: VmaAllocator
    + surface: vk::SurfaceKHR
    + deletionQueue: DeletionQueue
    + recreationQueue: optional<RecreationQueue>
    + swapchain: Swapchain
    + graphicsQueue: vk::Queue
    + graphicsQueueFamily: uint32_t
    + renderCommandPool: vk::CommandPool
    + renderCommandBuffers: ResourceRing<vk::CommandBuffer>
    + uploadCommandPool: vk::CommandPool
    + uploadCommandBuffer: vk::CommandBuffer
    + descriptorPool: vk::DescriptorPool
    + renderer: s_ptr<ARenderer>

    + init(): void
    + setRenderer(renderer: const s_ptr<ARenderer>&): void
    + run(): void
    + destroy(): void
    + upload_submit(recordCommands: const function<void(const vk::CommandBuffer& cmd)>&): void
    - draw(delta: float): void
    - resize(): void
    - initGLFW(): void
    - initVulkan(): void
    - initSyncStructures(): void
}

class Swapchain {
    - _engine: s_ptr<Engine>
    + swapchain: vk::SwapchainKHR
    + imageFormat: vk::Format
    + images: ResourceRing<vk::Image>
    + imageViews: ResourceRing<vk::ImageView>

    + init(engine: const s_ptr<Engine>&): void
    + size(): uint32_t
}

class InputCallbacks {
    + {field} cursorEnterCallbacks: vector<function<void(...)>>
    + {field} cursorPosCallbacks: vector<function<void(...)>>
    + {field} mouseButtonCallbacks: vector<function<void(...)>>
    + {field} scrollCallbacks: vector<function<void(...)>>
    + {field} charCallbacks: vector<function<void(..)>>
    + {field} keyCallbacks: vector<function<void(...)>>
    + {field} windowFocusCallbacks: vector<function<void(...)>>
}

together {

abstract class ARenderer {
    # _windowRenderPass: u_ptr<RenderPass>
    # _windowFramebuffers: ResourceRing<Framebuffer>

    + ARenderer(engine: const s_ptr<Engine>&)
    + virtual update(delta: float): void
    + virtual recordCommands(commandBuffer: const vk::CommandBuffer&, swapchainImage: uint32_t, flightFrame: uint32_t): void
    # initWindowRenderPass(): void
    # initWindowFramebuffers(): void
}

abstract class AResource {
    - deletorGroup: uint32_t
    # engine: s_ptr<Engine>

    + AResource(engine: const s_ptr<Engine>&)
    # pushDeletor(deletor: function<void(const s_ptr<Engine>& engine)>): void
    + destroy() const: void
    + resetDestroy(): void
}

}

together {

class DeletionQueue {
    - _groupIdGen: IdGenerator
    - _groups: deque<uint32_t>
    - {field} _deletors: unordered_map<uint32_t, deque<function<void()>>>

    + next_group(): uint32_t
    + push_deletor(group: uint32_t, deletor: const function<void()>&): void
    + push_group(deletor: const function<void()>&): uint32_t
    + destroy_group(group: uint32_t): void
    + destroy_all(): void
}

class IdGenerator {
    - _next: uint32_t
    - _used: unordered_set<uint32_t>

    + next(): uint32_t
    + reclaim(id: uint32_t): void
}

}

together {

enum RecreationEventFlags {
    NONE
    WINDOW_RESIZE
    RENDER_RESIZE
    TARGET_RESIZE
    DENOISER_SETTINGS
}

class RecreationQueue {
    - engine: s_ptr<Engine>
    - _creators: vector<pair<RecreationEventFlags, CreatorFunc>>
    - _deletors: vector<pair<RecreationEventFlags, DeletorFunc>>

    + RecreationQueue(engine: const s_ptr<Engine>&)
    + push(flags: RecreationEventFlags, creator: const CreatorFunc&): void
    + fire(flags: RecreationEventFlags): void
}

}

Engine *-- Swapchain
Engine *-l- DeletionQueue
Engine *-l- RecreationQueue
Engine *-- InputCallbacks
Engine o-- ARenderer

DeletionQueue *-- IdGenerator

ARenderer ..|> AResource

AResource ..> Engine
Swapchain ..> Engine
RecreationQueue ..> Engine

RecreationQueue o-- RecreationEventFlags

@enduml